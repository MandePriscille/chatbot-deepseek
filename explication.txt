Explication : Cette ligne importe le module models de Django, qui contient les outils nécessaires pour définir 
des modèles de base de données. Un modèle dans Django représente une table dans la base de données, et chaque champ
du modèle correspond à une colonne de cette table.


Explication : Cette ligne importe timezone du module django.utils. Cela permet de gérer les dates et heures avec le fuseau
des horodatages précis.


Explication : Définit une classe nommée Conversation qui hérite de models.Model. Cela indique à Django que cette classe est un modèle,
et qu'il doit créer une table dans la base de données correspondante. Chaque instance de cette classe représentera une conversation
dans votre application.

Explication :
titre : Nom du champ dans la table.
models.CharField : Type de champ qui stocke une chaîne de caractères (comme une colonne VARCHAR en SQL).
max_length=100 : Limite la longueur du texte à 100 caractères maximum.
default="Nouvelle conversation" : Si aucune valeur n’est fournie lors de la création d’une conversation, ce texte sera 
utilisé par défaut.


Explication :
date_creation : Nom du champ qui stocke la date et l’heure de création de la conversation.
models.DateTimeField : Type de champ pour enregistrer une date et une heure (comme DATETIME en SQL).
default=timezone.now : Si aucune valeur n’est spécifiée, la fonction timezone.now() est appelée pour insérer l’heure actuelle au
 moment de la création. (Note : Pas de parenthèses après now, car on passe la fonction elle-même, pas son résultat immédiat.)


def __str__(self) : Méthode spéciale en Python qui définit comment un objet de cette classe sera représenté sous forme de chaîne de
caractères (par exemple, dans l’admin Django ou en ligne de commande).
return self.titre : Quand on affiche une instance de Conversation, elle sera représentée par son titre (ex. "Nouvelle conversation").
Cela rend les objets plus lisibles pour les humains.



Modèle Message*******

Explication : Définit une classe Message qui hérite également de models.Model. Ce modèle représente les messages échangés dans une 
conversation. Chaque instance sera un message individuel envoyé par l’utilisateur ou le bot.


Explication :
conversation : Nom du champ qui établit une relation avec le modèle Conversation.
models.ForeignKey : Type de champ qui crée une clé étrangère (relation "plusieurs-à-un"). Cela signifie que chaque message est lié
 à une seule conversation.
Conversation : Le modèle cible de la relation (ici, une instance de Conversation).
on_delete=models.CASCADE : Si une conversation est supprimée, tous les messages associés seront également supprimés automatiquement
 (suppression en cascade).
related_name="messages" : Permet d’accéder aux messages d’une conversation en sens inverse. Par exemple, avec
conversation.messages.all(), vous pouvez récupérer tous les messages d’une conversation spécifique.


Explication :
contenu : Nom du champ qui stocke le contenu du message.
models.TextField : Type de champ pour stocker du texte de longueur variable, sans limite stricte (comme une colonne TEXT en SQL). 
Idéal pour les messages qui peuvent être courts ou longs.


Explication :
est_utilisateur : Nom du champ qui indique si le message vient de l’utilisateur ou du bot.
models.BooleanField : Type de champ pour stocker une valeur booléenne (True ou False).
default=True : Par défaut, un message est considéré comme venant de l’utilisateur. Si c’est une réponse du bot, il faudra explicitement définir ce champ à False.
# True pour l'utilisateur, False pour le bot : Commentaire expliquant la logique (non exécuté par le code).


Explication :
date_envoi : Nom du champ qui stocke la date et l’heure d’envoi du message.
models.DateTimeField : Comme pour date_creation, stocke une date et une heure.
default=timezone.now : Par défaut, l’heure actuelle est enregistrée au moment où le message est créé.


Explication :
def __str__(self) : Définit la représentation textuelle d’un objet Message.
return f"{self.conversation.titre} - {'Utilisateur' if self.est_utilisateur else 'Bot'}" :
Utilise une f-string pour créer une chaîne dynamique.
self.conversation.titre : Récupère le titre de la conversation associée (via la clé étrangère).
'Utilisateur' if self.est_utilisateur else 'Bot' : Condition ternaire qui affiche "Utilisateur" 
si est_utilisateur est True, sinon "Bot".
Exemple de résultat : "Nouvelle conversation - Utilisateur" ou "Nouvelle conversation - Bot".

